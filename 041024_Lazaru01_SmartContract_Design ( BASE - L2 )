// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

// Import OpenZeppelin Libraries for ERC20 token and ownership management
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

// Uniswap Router interface for liquidity management and token swapping
interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
}

// Uniswap Factory interface for pair creation
interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

// Main Token Contract implementing ERC20 and Ownable functionality
contract F1000F5T is ERC20, Ownable {
    // Mapping for fee exclusion and bot tracking
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) public bots;

    // State variables for wallet, transaction, and tax limits
    address payable private _taxWallet;
    uint256 public _maxTxAmount;
    uint256 public _maxWalletSize;
    uint256 private _taxRate = 3;
    uint256 private constant MAX_TAX_RATE = 10;

    // Flags for swap and trading activity
    bool private inSwap = false;
    bool private swapEnabled = true;
    bool public tradingActive = true;

    // Uniswap router and pair address for token liquidity
    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    // Events for important actions
    event MaxTxAmountUpdated(uint _maxTxAmount);
    event MaxWalletSizeUpdated(uint256 _maxWalletSize);
    event BotAdded(address indexed bot);
    event BotRemoved(address indexed bot);
    event TaxUpdated(uint256 taxRate);
    event LiquidityAdded(uint256 tokenAmount, uint256 ethAmount);
    event LiquidityRemoved(uint256 liquidity);
    event TradingEnabled(bool enabled);

    // Modifier to lock swapping functions
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    // Constructor to initialize token details and Uniswap router
    constructor(address routerAddress) ERC20("LAZARU01", "LZU01") Ownable() {
        _taxWallet = payable(msg.sender);
        _mint(_msgSender(), 1_000_000_000 * 10**decimals());  // Mint initial supply

        // Set initial max transaction and wallet size to 1% of total supply
        _maxTxAmount = totalSupply() / 100;
        _maxWalletSize = totalSupply() / 100;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_taxWallet] = true;

        // Initialize Uniswap router and create pair
        uniswapV2Router = IUniswapV2Router02(routerAddress);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
    }

    // Override _transfer with tax, swap, and bot protection logic
    function _transfer(address from, address to, uint256 value) internal virtual override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(value > 0, "Transfer amount must be greater than zero");
        require(value <= _maxTxAmount, "Transfer amount exceeds the max transaction size");
        require(balanceOf(to) + value <= _maxWalletSize, "Wallet size exceeds the max wallet size");
        require(!bots[from] && !bots[to], "Bot address cannot transfer tokens");
        require(tradingActive || _isExcludedFromFee[from] || _isExcludedFromFee[to], "Trading is currently disabled");

        uint256 taxAmount = 0;
        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
            taxAmount = value * _taxRate / 100;
        }

        super._transfer(from, to, value - taxAmount);

        if (taxAmount > 0) {
            super._transfer(from, address(this), taxAmount);
        }

        if (!inSwap && swapEnabled && taxAmount > 0) {
            swapAndLiquify(taxAmount);
        }
    }

    // Function to handle token swapping and liquidity management
    function swapAndLiquify(uint256 amount) private lockTheSwap {
        _swapTokensForEth(amount);
        _sendETHToWallet(amount);
    }

    // Swap tokens for ETH using Uniswap
    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);  // Declare and initialize the path array
        path[0] = address(this);  // Token contract address
        path[1] = uniswapV2Router.WETH();  // WETH address

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Execute the token swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    // Send ETH to the tax wallet
    function _sendETHToWallet(uint256 amount) private {
        _taxWallet.transfer(amount);
    }

    // Manual swap function for the owner to trigger
    function manualSwap() external onlyOwner {
        uint256 contractTokenBalance = balanceOf(address(this));
        require(contractTokenBalance > 0, "No tokens to swap");
        swapAndLiquify(contractTokenBalance);
    }

    // Add liquidity to Uniswap
    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) external onlyOwner {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            owner(),
            block.timestamp
        );
        emit LiquidityAdded(tokenAmount, ethAmount);
    }

    // Remove liquidity from Uniswap
    function removeLiquidity(uint256 liquidity) external onlyOwner {
        require(liquidity > 0, "Liquidity must be greater than 0");
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), liquidity);
        uniswapV2Router.removeLiquidityETH(
            address(this),
            liquidity,
            0,
            0,
            owner(),
            block.timestamp
        );
        emit LiquidityRemoved(liquidity);
    }

    // Function to adjust tax rate (within limits)
    function setTaxRate(uint256 taxRate) external onlyOwner {
        require(taxRate <= MAX_TAX_RATE, "Tax rate can't exceed 10%");
        _taxRate = taxRate;
        emit TaxUpdated(taxRate);
    }

    // Function to set the tax wallet address
    function setTaxWallet(address payable newTaxWallet) external onlyOwner {
        _taxWallet = newTaxWallet;
    }

    // Enable or disable swap functionality
    function setSwapEnabled(bool _enabled) external onlyOwner {
        swapEnabled = _enabled;
    }

    // Set the maximum transaction amount
    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {
        require(maxTxAmount > 0, "Max transaction amount must be greater than zero");
        _maxTxAmount = maxTxAmount;
        emit MaxTxAmountUpdated(maxTxAmount);
    }

    // Set the maximum wallet size
    function setMaxWalletSize(uint256 maxWalletSize) external onlyOwner {
        require(maxWalletSize > 0, "Max wallet size must be greater than zero");
        _maxWalletSize = maxWalletSize;
        emit MaxWalletSizeUpdated(maxWalletSize);
    }

    // Add an address to the bot list
    function addBot(address bot) external onlyOwner {
        bots[bot] = true;
        emit BotAdded(bot);
    }

    // Remove an address from the bot list
    function removeBot(address bot) external onlyOwner {
        bots[bot] = false;
        emit BotRemoved(bot);
    }

    // Enable or disable trading
    function setTradingActive(bool _active) external onlyOwner {
        tradingActive = _active;
        emit TradingEnabled(_active);
    }

    // Function to withdraw stuck tokens or ETH
    function withdrawStuckTokens(address tkn) public onlyOwner {
        if (tkn == address(0)) {
            uint256 etherBalance = address(this).balance;
            require(etherBalance > 0, "No Ether to withdraw");

            (bool success, ) = msg.sender.call{value: etherBalance}("");
            require(success, "Ether withdrawal failed");
        } else {
            IERC20 token = IERC20(tkn);
            uint256 tokenBalance = token.balanceOf(address(this));
            require(tokenBalance > 0, "No tokens to withdraw");

            token.transfer(msg.sender, tokenBalance);
        }
    }

    // Allow the contract to receive ETH
    receive() external payable {}

    // -----------------------------------------
    // Full List of Key Features.
    // -----------------------------------------
    /*
    Full List of Key Functions:
    1. Ownership Management:
        ◦ owner(): View current owner.
        ◦ transferOwnership(): Transfer ownership to a new address.
        ◦ renounceOwnership(): Renounce ownership permanently (decentralize the contract).
    2. ERC20 Compliance:
        ◦ name(), symbol(), decimals(), totalSupply(): Standard ERC20 token functions.
        ◦ balanceOf(), allowance(), transfer(), approve(), transferFrom(): Standard ERC20 token transfer and approval functions.
    3. Liquidity Management:
        ◦ addLiquidity(): Add liquidity to Uniswap.
        ◦ removeLiquidity(): Remove liquidity from Uniswap.
    4. Tax and Swap Management:
        ◦ swapAndLiquify(): Swap tokens for ETH and add liquidity.
        ◦ manualSwap(): Manually trigger the swap and liquify process.
        ◦ setTaxRate(): Adjust the tax rate.
        ◦ setTaxWallet(): Set the tax wallet address.
        ◦ setSwapEnabled(): Enable/disable automatic swapping.
    5. Bot Protection:
        ◦ addBot(): Add an address to the bot blacklist.
        ◦ removeBot(): Remove an address from the bot blacklist.
    6. Transaction Limits:
        ◦ setMaxTxAmount(): Set maximum transaction amount.
        ◦ setMaxWalletSize(): Set maximum wallet size.
    7. Trading Control:
        ◦ setTradingActive(): Enable/disable trading.
    8. Safe Withdrawals:
        ◦ withdrawStuckTokens(): Withdraw stuck Ether or ERC20 tokens from the contract.
    9. Fallback:
        ◦ receive(): Allow the contract to receive ETH.
    */

    // -----------------------------------------
    // Recent Updates and Issues ( Lo que estaba Intentando arreglar )
    // -----------------------------------------
    /*
    Recent Updates and Issues:
    1. Implemented ERC20 and OpenZeppelin libraries for improved security and efficiency.
    2. Addressed the "Trying to override non-virtual function" issue by ensuring `_transfer` is marked `virtual` and properly overridden.
    3. Resolved the "DeclarationError: Undeclared identifier" by correctly initializing the `path` array in the `_swapTokensForEth` function.
    4. Introduced additional functionality for bot protection, tax management, and liquidity handling.
    5. Ensured compliance with Solidity version 0.8.23 and integrated gas optimizations to reduce costs.
    6. Ongoing focus on testing and validating the code against external libraries like Brett, Cate, and Colon contracts for best practices.
    */
